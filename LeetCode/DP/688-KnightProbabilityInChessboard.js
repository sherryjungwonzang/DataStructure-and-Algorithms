//688. Knight Probability in Chessboard
//on an n x n chessboard, a knight starts at the cell (row, col) and attempts to make exactly k moves
//the rows and columns are 0-indexed, so that top-left cell is (0, 0) and the bottom-right cell is (n - 1, n - 1)

//a chess knight has 8 possible moves it can make, as illustrated 
//each move is two cells in a cardinal direction, then one cell in an orthogonal direction

//the knight continues moving until it has made exaclty k moves or has moved off the chessboard
//return the probability that the knight remains on the board after it has stopped moving

//Approach:
//using DP 3D Array
var knightProbabilityChessboard = (n, k, row, column) => {
    let dirs = [ [-2, -1], [-2, 1], [-1, 2], [1, 2], [2, 1], [2, -1], [1, -2], [-1, -2] ];
    let dp = [...Array(k + 1)].map(() => [...Array(n)].map(() => Array(n).fill(0))); //3D array

    //starting point
    dp[0][row][col] = 1;

    //recursive calls
    for (let t = 1; t <= k; t++) { //moves
        for (let r = 0; r < n; r++) { //row
            for (let c = 0; c < n; c++) { //col
                //next directions
                for (let [dr, dc] of dirs) { 
                    let row = r + dr;
                    let col = c + dc;

                    //recursive calls on 8 directions & probability
                    if (row >= 0 && row < n && col >= 0 && col < n) dp[t][r][c] += dp[t - 1][row][col] / 8;
                }
            }
        }
    };

    let res = 0;

    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            res += dp[k][i][j];
        }
    }

    return res;
}
knightProbabilityChessboard(3, 2, 0, 0); //0.06250
//DP
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 0, c = 0
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [1, 2], [2, 1]
//dp[1][0][0] += dp[0][1][2] / 8 = 0
//dp[1][0][0] += dp[0][2][1] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 0, c = 1
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: [2, 2], [2, 0]
//dp[1][0][1] += dp[0][2][2] / 8 = 0
//dp[1][0][1] += dp[0][2][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 0, c = 2
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [2, 1], [1, 0]
//dp[1][0][2] += dp[0][2][1] / 8 = 0
//dp[1][0][2] += dp[0][1][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 1, c = 0
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [0, 2], [2, 2]
//dp[1][1][0] += dp[0][0][2] / 8 = 0
//dp[1][1][0] += dp[0][2][2] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 1, c = 1
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: -
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 1, c = 2
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [2, 0], [0, 0]
//dp[1][1][2] += dp[0][2][0] / 8 = 0
//dp[1][1][2] += dp[0][0][0] / 8 = 0.125
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 2, c = 0
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [0, 1], [1, 2]
//dp[1][2][0] += dp[0][0][1] / 8 = 0
//dp[1][2][0] += dp[0][1][2] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 2, c = 1
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: [0, 0], [0, 2]
//dp[1][2][1] += dp[0][0][0] / 8 = 0.125
//dp[1][2][1] += dp[0][0][2] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 1, r = 2, c = 2
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [0, 1], [1, 0]
//dp[1][2][2] += dp[0][0][1] / 8 = 0
//dp[1][2][2] += dp[0][1][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 2, r = 0, c = 0
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [1, 2], [2, 1]
//dp[2][0][0] += dp[1][1][2] / 8 = 0.015626
//dp[2][0][0] += dp[1][2][1] / 8 = 0.015626
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0], [0, 0, 0], [0, 0, 0] ]


//t = 2, r = 0, c = 1
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: [2, 2], [2, 0]
//dp[2][0][1] += dp[1][2][2] / 8 = 0
//dp[2][0][1] += dp[1][2][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0], [0, 0, 0], [0, 0, 0] ]

//t = 2, r = 0, c = 2
//row = 0 + -2 = -2 | -2 = -2 | -1 = -1 | 1 = 1 | 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [2, 1], [1, 0]
//dp[2][0][2] += dp[1][2][1] / 8 = 0.015625
//dp[2][0][2] += dp[1][1][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0, 0, 0] ]


//t = 2, r = 1, c = 0
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [0, 2], [2, 2]
//dp[2][1][0] += dp[1][0][2] / 8 = 0
//dp[2][1][0] += dp[1][2][2] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0, 0, 0] ]


//t = 2, r = 1, c = 1
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: -
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0, 0, 0] ]

//t = 2, r = 1, c = 2
//row = 1 + -2 = -1 | -2 = -1 | -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [2, 0], [0, 0]
//dp[2][1][2] += dp[1][2][0] / 8 = 0
//dp[2]][1][2] += dp[1][0][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0, 0, 0] ]

//t = 2, r = 2, c = 0
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 0 + -1 = -1 | 1 = 1| 2 = 2 | 2 = 2 | 1 = 1 | -1 = -1 | -2 = -2 | -2 = -2
//valid dirs: [0, 1], [1, 2]
//dp[2][2][0] += dp[1][0][1] / 8 = 0
//dp[2][2][0] += dp[1][1][2] / 8 = 0.01526
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0.01526, 0, 0] ]

//t = 2, r = 2, c = 1
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 1 + -1 = 0 | 1 = 2 | 2 = 3 | 2 = 3 | 1 = 2 | -1 = 0 | -2 = -1 | -2 = -1
//valid dirs: [0, 0], [0, 2]
//dp[2][2][1] += dp[1][0][0] / 8 = 0
//dp[2][2][1] += dp[1][0][2] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0.01526, 0, 0] ]
//t = 2, r = 2, c = 2
//row = 2 + -2 = 0 | -2 = 0 | -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1
//col = 2 + -1 = 1 | 1 = 3 | 2 = 4 | 2 = 4 | 1 = 3 | -1 = 1 | -2 = 0 | -2 = 0
//valid dirs: [0, 1], [1, 0]
//dp[2][2][2] += dp[1][0][1] / 8 = 0
//dp[2][2][2] += dp[1][1][0] / 8 = 0
//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0.01526, 0, 0] ]

//[ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]
//[ [0, 0, 0], [0, 0, 0.125], [0, 0.125, 0] ]
//[ [0.03125, 0, 0.015625], [0, 0, 0], [0.01526, 0, 0] ]
//res = 0
//starting from dp[2][0][0]
//res = 0 -> 0.03125 -> 0.03125 -> 0.46875 -> 0.46875 -> 0.46875 -> 0.46875 -> 0.0625 -> 0.0625 -> 0.0625

knightProbabilityChessboard(1, 0, 0, 0); //1.00000
