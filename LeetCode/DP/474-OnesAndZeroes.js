//474. Ones And Zeroes
//given an array of binary strings 'strs' and two integers 'm' and 'n'
//return the size of the largest subset of 'strs' such that there are at most m 0's and n 1's in the subset
//a set x is a subset of set y if all elements of x are also elements of y

//Approach:
//using DP
var onesAndZeroes = (strs, m,n) => {
    let dp = new Array(m + 1).fill('').map(() => Array(n + 1).fill(0));

    strs.forEach(str => {
        let ones = 0;
        let zeroes = 0;

        //collecting the num of 1 and 0
        for (let char of str) {
            char === '0' ? zeroes += 1 : ones += 1;
        };

        //DP
        for (let i = m; i >= zeroes; i--) {
            for (let j = n; j >= ones; j--) {
                dp[i][j] = Math.max(dp[i][j], dp[i - zeroes][j - ones] + 1);
            }
        } 
    });

    return dp[m][n];
}
//TC: O(m * n * k)
//SC: O(m * n)
onesAndZeroes(strs = ["10","0001","111001","1","0"], m = 5, n = 3); //4 - {"10", "0001", "1", "0"}
//DP
//  0 0 0 0
//  0 0 0 0
//  0 0 0 0
//  0 0 0 0
//  0 0 0 0
//  0 0 0 0

//["10","0001","111001","1","0"]
//  ^
//ones = 0 -> 1
//zeroes = 0 -> 1
//i = 5, j = 3
//dp[5][3] = max(dp[5][3], dp[5-1][3-1] + 1) = 1
//dp[5][2] = max(dp[5][2], dp[5-1][2-1] + 1) = 1
//...
//dp[1][1] = max(dp[1][1], dp[1-1][1-1] + 1) = 1
//  0 0 0 0
//  0 1 1 1
//  0 1 1 1
//  0 1 1 1
//  0 1 1 1
//  0 1 1 1

//["10","0001","111001","1","0"]
//        ^
//ones = 0 -> 1
//zeroes = 0 -> 1 -> 2 -> 3
//i = 5, j = 3
//dp[5][3] = max(dp[5][3], dp[5-3][3-1] + 1) = 2
//dp[5][2] = max(dp[5][2], dp[5-3][2-1] + 1) = 2
//dp[5][1] = max(dp[5][1], dp[5-3][1-1] + 1) = 1
//dp[4][3] = max(dp[4][3], dp[4-3][3-1] + 1) = 2
//dp[4][2] = max(dp[4][2], dp[4-3][2-1] + 1) = 2
//dp[4][1] = max(dp[4][1], dp[4-3][1-1] + 1) = 1
//dp[3][3] = max(dp[3][3], dp[3-3][3-1] + 1) = 1
//dp[3][2] = max(dp[3][2], dp[3-3][2-1] + 1) = 1
//dp[3][1] = max(dp[3][1], dp[3-3][1-1] + 1) = 1
//  0 0 0 0
//  0 1 1 1
//  0 1 1 1
//  0 1 1 1
//  0 1 2 2
//  0 1 2 2

//["10","0001","111001","1","0"]
//                 ^
//ones = 0 -> 1 -> 2 -> 3 -> 4
//zeroes = 0 -> 1 -> 2
// -

//["10","0001","111001","1","0"]
//                       ^
//ones = 0 -> 1
//zeroes = 0
//dp[5][3] = max(dp[5][3], dp[5-0][3-1] + 1) = 3
//dp[5][2] = max(dp[5][2], dp[5-0][2-1] + 1) = 2
//dp[5][1] = max(dp[5][1], dp[5-0][1-1] + 1) = 1
//dp[4][3] = max(dp[4][3], dp[4-0][3-1] + 1) = 3
//dp[4][2] = max(dp[4][2], dp[4-0][2-1] + 1) = 2
//dp[4][1] = max(dp[4][1], dp[4-0][1-1] + 1) = 1
//dp[3][3] = max(dp[3][3], dp[3-0][3-1] + 1) = 2
//dp[3][2] = max(dp[3][2], dp[3-0][2-1] + 1) = 2
//dp[3][1] = max(dp[3][1], dp[3-0][1-1] + 1) = 1
//dp[2][3] = max(dp[2][3], dp[2-0][3-1] + 1) = 2
//dp[2][2] = max(dp[2][2], dp[2-0][2-1] + 1) = 2
//dp[2][1] = max(dp[2][1], dp[2-0][1-1] + 1) = 1
//dp[1][3] = max(dp[1][3], dp[1-0][3-1] + 1) = 2
//dp[1][2] = max(dp[1][2], dp[1-0][2-1] + 1) = 2
//dp[1][1] = max(dp[1][1], dp[1-0][1-1] + 1) = 1
//dp[0][3] = max(dp[0][3], dp[0-0][3-1] + 1) = 1
//dp[0][2] = max(dp[0][2], dp[0-0][2-1] + 1) = 1
//dp[0][1] = max(dp[0][1], dp[0-0][1-1] + 1) = 1
//  0 1 1 1
//  0 1 2 2
//  0 1 2 2
//  0 1 2 2
//  0 1 2 3
//  0 1 2 3


//["10","0001","111001","1","0"]
//                           ^
//ones = 0
//zeroes = 0 -> 1
//dp[5][3] = max(dp[5][3], dp[5-1][3-0] + 1) = 4
//dp[5][2] = max(dp[5][2], dp[5-1][2-0] + 1) = 3
//dp[5][1] = max(dp[5][1], dp[5-1][1-0] + 1) = 2
//dp[5][0] = max(dp[5][0], dp[5-1][0-0] + 1) = 1
//dp[4][3] = max(dp[4][3], dp[4-1][3-0] + 1) = 3
//dp[4][2] = max(dp[4][2], dp[4-1][2-0] + 1) = 3
//dp[4][1] = max(dp[4][1], dp[4-1][1-0] + 1) = 2
//dp[4][0] = max(dp[4][0], dp[4-1][0-0] + 1) = 1
//dp[3][3] = max(dp[3][3], dp[3-1][3-0] + 1) = 3
//dp[3][2] = max(dp[3][2], dp[3-1][2-0] + 1) = 3
//dp[3][1] = max(dp[3][1], dp[3-1][1-0] + 1) = 2
//dp[3][0] = max(dp[3][0], dp[3-1][0-0] + 1) = 1
//dp[2][3] = max(dp[2][3], dp[2-1][3-0] + 1) = 3
//dp[2][2] = max(dp[2][2], dp[2-1][2-0] + 1) = 3
//dp[2][1] = max(dp[2][1], dp[2-1][1-0] + 1) = 2
//dp[2][0] = max(dp[2][0], dp[2-1][0-0] + 1) = 1
//dp[1][3] = max(dp[1][3], dp[1-1][3-0] + 1) = 2
//dp[1][2] = max(dp[1][2], dp[1-1][2-0] + 1) = 2
//dp[1][1] = max(dp[1][1], dp[1-1][1-0] + 1) = 2
//dp[1][0] = max(dp[1][0], dp[1-1][0-0] + 1) = 1
//  0 1 1 1
//  1 2 2 2
//  1 2 3 3
//  1 2 3 3
//  1 2 3 3
//  1 2 3 4

onesAndZeroes(strs = ["10","0","1"], m = 1, n = 1); //2 - {"0", "1"}
